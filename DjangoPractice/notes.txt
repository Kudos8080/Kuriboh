1. create project

django-admin startproject mysite2

|___ mysite2
        |_____ manage.py
        |
        |_____ mysite2
                  |______  __init__.py
                  |______  settings.py
                  |______  urls.py
                  |______  wsgi.py


django-admin startproject mysite2 .
.
|_____ manage.py
|
|_____ mysite2
          |______  __init__.py
          |______  settings.py
          |______  urls.py
          |______  wsgi.py


2. run django project

python manage.py runserver

January 28, 2019 - 14:54:49
Django version 2.0.3, using settings 'mysite2.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.


3. create application

python manage.py startapp blog


|___ mysite2
        |_____ manage.py
        |
        |_____ mysite2
        |
        |_____ db.sqlite3
        |
        |_____ blog
                |______ views.py
                |______ tests.py
                |______ models.py
                |______ migrations
                |______ apps.py
                |______ admin.py
                |______ __init__.py


4. manage.py

django-admin startapp blog and python manage.py startapp blog are same.
https://docs.djangoproject.com/en/2.1/ref/django-admin/


(1)django-admin

Available subcommands:

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    runserver
    sendtestemail
    shell
    showmigrations
    sqlflush
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    test
    testserver

(2) python manage.py

[auth]
    changepassword
    createsuperuser

[contenttypes]
    remove_stale_contenttypes

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    sendtestemail
    shell
    showmigrations
    sqlflush
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    test
    testserver

[sessions]
    clearsessions

[staticfiles]
    collectstatic
    findstatic
    runserver


5. mysite2

settings.py -- include the initial setup and project level configuration
urls.py -- URL configuration file
wsgi.py -- wsgi is short for web server gateway interface. 
__pycache__ -- cache to store the compiling files

6. blog

admin.py -- customised django admin tools
apps.py -- application level configuration, usually used to set the app name
migrations (directory) -- used to store the application database table instructions and 
						  modify and create tables.
models.py -- application data model
tests.py -- used to write testing cases 
views.py -- function views and class views


7. settings.py

ALLOWED_HOSTS: When DEBUG is True, it can be empty. When the website is deployed to production,
the domain name should be put in here

INSTALLED_APPS: Only when the application is added here, the application can work


Debug Mode vs Production Mode

Debug Mode : no need to setup Apache and Nginx because Django can provide basic web service
             can detect the hot fixes automatically and no need to restart Django 

Production Mode: need to setup up real web service based on requirements



8. models.py

code snippets:

from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User

# Create your models here.

class BlogArticles(models.Model):
    title = models.CharField(max_length=300) # (1)
    author = models.ForeignKey(User, related_name="blog_posts") #(2)
    body = models.TextField()
    publish = models.DateTimeField(default=timezone.now)

    class Meta: #(3)
        ordering = ("-publish",)

    def __str__(self):
        return self.title


(1) the data type of title is CharField() and max length is 300
(2) give the relationship between blog artiles and user. (one to many)
    "blog_posts" is used by user to do reverse check for the blog articles
(3) this "Meta" is different from the "Python Meta class". 
    Here this class is used to set the display order for blog articles.
    The display order for blog articles is in the reverse order of publish time

notes:
A many-to-one relationship. Requires two positional arguments: the class to which the model is related and the on_delete option. (on_delete isnâ€™t actually required, but not providing it gives a deprecation warning. It will be required in Django 2.0.)

https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ForeignKey

9. makemigration

python manage.py makemigrations

$ python manage.py makemigrations

Migrations for 'blog':
  blog/migrations/0001_initial.py
    - Create model BlogArticles


automatically generate 0001_initial.py file under migrations/__pycache__/

$ python manage.py sqlmigrate blog 0001 (will display the sql details)

BEGIN;
--
-- Create model BlogArticles
--
CREATE TABLE "blog_blogarticles" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(300) NOT NULL, "body" text NOT NULL, "publish" datetime NOT NULL, "author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE INDEX "blog_blogarticles_author_id_ed798e23" ON "blog_blogarticles" ("author_id");
COMMIT;

$ python manage.py migrate  (create databases and tables)

10. sqlite cmd

reference: http://www.runoob.com/sqlite/sqlite-commands.html
           https://blog.csdn.net/u013664733/article/details/54912201

$ sqlite3 db.sqlite3
$ .tables
auth_group                  blog_blogarticles         
auth_group_permissions      django_admin_log          
auth_permission             django_content_type       
auth_user                   django_migrations         
auth_user_groups            django_session            
auth_user_user_permissions
$ .schema blog_blogarticles
$ .dump blog_blogarticles
$ select * from blog_blogarticles










































