1. create project

django-admin startproject mysite2

|___ mysite2
        |_____ manage.py
        |
        |_____ mysite2
                  |______  __init__.py
                  |______  settings.py
                  |______  urls.py
                  |______  wsgi.py


django-admin startproject mysite2 .
.
|_____ manage.py
|
|_____ mysite2
          |______  __init__.py
          |______  settings.py
          |______  urls.py
          |______  wsgi.py


2. run django project

python manage.py runserver

January 28, 2019 - 14:54:49
Django version 2.0.3, using settings 'mysite2.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.


3. create application

python manage.py startapp blog


|___ mysite2
        |_____ manage.py
        |
        |_____ mysite2
        |
        |_____ db.sqlite3
        |
        |_____ blog
                |______ views.py
                |______ tests.py
                |______ models.py
                |______ migrations
                |______ apps.py
                |______ admin.py
                |______ __init__.py


4. manage.py

django-admin startapp blog and python manage.py startapp blog are same.
https://docs.djangoproject.com/en/2.1/ref/django-admin/


(1)django-admin

Available subcommands:

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    runserver
    sendtestemail
    shell
    showmigrations
    sqlflush
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    test
    testserver

(2) python manage.py

[auth]
    changepassword
    createsuperuser

[contenttypes]
    remove_stale_contenttypes

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    sendtestemail
    shell
    showmigrations
    sqlflush
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    test
    testserver

[sessions]
    clearsessions

[staticfiles]
    collectstatic
    findstatic
    runserver


5. mysite2

settings.py -- include the initial setup and project level configuration
urls.py -- URL configuration file
wsgi.py -- wsgi is short for web server gateway interface. 
__pycache__ -- cache to store the compiling files

6. blog

admin.py -- customised django admin tools
apps.py -- application level configuration, usually used to set the app name
migrations (directory) -- used to store the application database table instructions and 
						  modify and create tables.
models.py -- application data model
tests.py -- used to write testing cases 
views.py -- function views and class views


7. settings.py

ALLOWED_HOSTS: When DEBUG is True, it can be empty. When the website is deployed to production,
the domain name should be put in here

INSTALLED_APPS: Only when the application is added here, the application can work


Debug Mode vs Production Mode

Debug Mode : no need to setup Apache and Nginx because Django can provide basic web service
             can detect the hot fixes automatically and no need to restart Django 

Production Mode: need to setup up real web service based on requirements



8. models.py

code snippets:

from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User

# Create your models here.

class BlogArticles(models.Model):
    title = models.CharField(max_length=300) # (1)
    author = models.ForeignKey(User, related_name="blog_posts") #(2)
    body = models.TextField()
    publish = models.DateTimeField(default=timezone.now)

    class Meta: #(3)
        ordering = ("-publish",)

    def __str__(self):
        return self.title


(1) the data type of title is CharField() and max length is 300
(2) give the relationship between blog artiles and user. (one to many)
    "blog_posts" is used by user to do reverse check for the blog articles
(3) this "Meta" is different from the "Python Meta class". 
    Here this class is used to set the display order for blog articles.
    The display order for blog articles is in the reverse order of publish time

notes:
A many-to-one relationship. Requires two positional arguments: the class to which the model is related and the on_delete option. (on_delete isn’t actually required, but not providing it gives a deprecation warning. It will be required in Django 2.0.)

https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ForeignKey

9. makemigration

python manage.py makemigrations

$ python manage.py makemigrations

Migrations for 'blog':
  blog/migrations/0001_initial.py
    - Create model BlogArticles


automatically generate 0001_initial.py file under migrations/__pycache__/

$ python manage.py sqlmigrate blog 0001 (will display the sql details)

BEGIN;
--
-- Create model BlogArticles
--
CREATE TABLE "blog_blogarticles" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(300) NOT NULL, "body" text NOT NULL, "publish" datetime NOT NULL, "author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE INDEX "blog_blogarticles_author_id_ed798e23" ON "blog_blogarticles" ("author_id");
COMMIT;

$ python manage.py migrate  (create databases and tables)

10. sqlite cmd

reference: http://www.runoob.com/sqlite/sqlite-commands.html
           https://blog.csdn.net/u013664733/article/details/54912201

$ sqlite3 db.sqlite3
$ .tables
auth_group                  blog_blogarticles         
auth_group_permissions      django_admin_log          
auth_permission             django_content_type       
auth_user                   django_migrations         
auth_user_groups            django_session            
auth_user_user_permissions
$ .schema blog_blogarticles
$ .dump blog_blogarticles
$ select * from blog_blogarticles


11. admin.py

Code Snippets:

from django.contrib import admin
from .models import BlogArticles

admin.site.register(BlogArticles)


this code will add Blog Articles setup in admin website


pip install pytz # timezone 


12. HTTP

Request/Response

8 types of request:
OPTIONS, HEAD, GET, POST, PUT, DELETE, TRACE and CONNECT


GET: send request to specific server to get info
POST: submit data or upload file to the server

HTTP: port 80, clear text
HTTPS: port 443, cipher text

URL: Uniform/Universe Resource Locator

URL:
http or https:// ip address or domain name /

get: ? para1=xx & para2=xx & para3=xx


13. ORM

ORM : Object-Relation Mapping (between models and database table mapping)

$ python manage.py makemigrations
$ python manage.py migrate


$ python manage.py shell

Python 3.6.1 |Anaconda 4.4.0 (x86_64)| (default, May 11 2017, 13:04:09) 
Type "copyright", "credits" or "license" for more information.

IPython 5.3.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: from django.contrib.auth.models import User

In [2]: from blog.models import BlogArticles

In [3]: user = User.objects.get(username="admin")

In [4]: user.username
Out[4]: 'admin'

In [5]: user.id
Out[5]: 1

In [7]: type(user)
Out[7]: django.contrib.auth.models.User

In [8]: blogs = BlogArticles.objects.all()

In [9]: blogs
Out[9]: <QuerySet [<BlogArticles: Happy Chinese New Year>, <BlogArticles: You Raise Me up>, <BlogArticles: The Promise>]>

In [10]: for blog in blogs:
    ...:     print(blog.title)
    ...:     
Happy Chinese New Year
You Raise Me up
The Promise



14. render()

code snippets:

from django.shortcuts import render
from .models import BlogArticles

# Create your views here.
def blog_title(request):
    blogs = BlogArticles.objects.all()
    return render(request, "blog/titles.html", {"blogs":blogs})


render() is used to apply data to specific template

every appliaction should have its own template folder

template directory structure:

------ templates
          |________ base.html
          |________ blog
                     |________ titles.html


15. {% block name %}

base.html:
{% block name %}
{% endblock %}


blog/titles.html
{% extends "base.html" %}
{% block title %}blog titles{% endlock %}

{% block content %}
<div>
</div>

<div>
...
<ul>
{% for blog in blogs %}
    <li>{{ blog.title }}</li>
{% endfor %}
</ul>
...
</div>
{% endlock %}


16. urls.py

mysite2/urls.py

urlpatterns = [
    path('admin/', admin.site.urls),
    path('blog/', include('blog.urls', namespace='blog')),
]

blog/urls.py

app_name = "blog"

urlpatterns = [
    path("", views.blog_title, name='blog_title'),
    #path('<int:article_id>/', views.blog_article),
    path('<int:article_id>/', views.blog_article, name='blog_article'),
]



17. get_object_or_404()

When the object that requests dosen't exist, program will throw DoesNotExist 
exception. As for this exception, you can use try...except.. and in except, you can use raise Http404() to handle. These operations are wrapped in 
get_object_or_404().

get_object_or_404(klass, *args, **kwargs)

e.g
article = get_object_or_404(BlogArticles, id=article_id)


18. MVC or MTV

MVC -- Xerox PARC -- Smalltalk

MTV(Model - Template - Views)

core features:
1. Python
2. DRY (Don't Repeat Yourself)
3. Loose Coupling
4. Rapid Development


19. customized template

TEMPLATE DIRS and APP_DIRS:

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


STATIC FILES:

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

tree:
(1) find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
(2) brew install tree

mysite2/static$


├── css
│   ├── bootstrap-theme.css
│   ├── bootstrap-theme.min.css
│   ├── bootstrap.css
│   ├── bootstrap.css.map
│   ├── bootstrap.min.css
│   ├── bootstrap.min.css.map
│   ├── imagecrop.css
│   └── mansory-style.css
├── fonts
│   ├── glyphicons-halflings-regular.eot
│   ├── glyphicons-halflings-regular.svg
│   ├── glyphicons-halflings-regular.ttf
│   ├── glyphicons-halflings-regular.woff
│   └── glyphicons-halflings-regular.woff2
├── images
│   ├── avatar.png
│   ├── backlogo.png
│   ├── book.jpg
│   ├── logo.png
│   └── newton.jpg
├── js
│   ├── bootstrap.js
│   ├── bootstrap.min.js
│   ├── cropbox-min.js
│   ├── cropbox.js
│   ├── csrf.js
│   ├── jquery-1.11.1.min.js
│   ├── jquery.js
│   ├── json2.js
│   ├── layer.js
│   ├── mp.mansory.min.js
│   ├── npm.js
│   └── skin
│       └── default
│           ├── icon-ext.png
│           ├── icon.png
│           ├── layer.css
│           ├── loading-0.gif
│           ├── loading-1.gif
│           └── loading-2.gif
└── newton.jpg


{% static %} insert static file in Django
{% url 'blog:blog_title' %}

avoid hardcode


20. Django Path

/anaconda/lib/python3.6/site-packages/django/contrib/admin/templates


21. templates & contexts

render(request, "blog/content.html", {"article":article, "publish":pub})

templates: (blog/content.html)
contexts: ({"article":article, "publish":pub})


variable label:
{{ variable }}

block label:
{% for blog in blogs %}
    <li><a href="{{blog.id}}">{{ blog.title }}</a></li>
{% endfor %}

{% command %}
{% endname %}

22. Form

is_bound

$ loginForm = LoginForm()
$ loginForm.is_bound
False

$ dataLogin = {"username":"abcde", "password":"12345"}
$ loginForm = LoginForm(dataLogin)
$ loginForm.is_bound
True

$ loginForm.is_valid()

dataLogin is correct (True) or not correct (False)

$ loginForm.cleaned_data
{"username":"abcde", "password":"12345"}


23. INSTALLED_APPS

django.contrib.auth
authenticate() and login()

after login(), django will call default session application to store user id in session 


24. HttpRequest && HttpResponse

request.GET and request.POST

GET: query data
POST: insert or update data
      submit form data

HttpResponse return a string
HttpResponse("Wellcome You. You have been authenticated successfully")

render return a html 
render(request, "account/login.html", {"form":login_form})


24. login.html

{% csrf_token %}

CSRF: cross-site request forgery

{% csrf_token %} must be added in form to avoid attack from CSRF



{{ form.as_p }}
transfer the form to <p> label, similarly as_ul and as_table

25. default admin 

/anaconda/lib/python3.6/site-packages/django/contrib/auth

/anaconda/lib/python3.6/site-packages/django/contrib/auth/views.py

26. python代码`if not x:` 和`if x is not None:`和`if not x is None:`

在python中 None,  False, 空字符串"", 0, 空列表[], 空字典{}, 空元组()都相当于False ，即：

not None == not False == not '' == not 0 == not [] == not {} == not ()

因此在使用列表的时候，如果你想区分x==[]和x==None两种情况的话, 此时`if not x:`将会出现问题：


>>> x = []
>>> y = None
>>> 
>>> x is None
False
>>> y is None
True
>>> 
>>> 
>>> not x
True
>>> not y
True
>>> 
>>> 
>>> not x is None
>>> True
>>> not y is None
False
>>>


27. HttpRequest Attribute

path: return one string
GET: return dict object
POST: return dict object
REQUEST: dict object
FILES: dict object
COOKIES: dict
META: dict, HTTP header
user: user object



HttpResponse:
mainly to return string 
response = HttpResponse("Here is the text of the web page.")



28. forms.Form & forms.ModelForm


Form won't change the databases
ModelForm will insert or update databases

Meta is internal class and will specify the table and fields

e.g
class Meta:
    model = User
    fields = ("username", "email")


29. Models

account/models.py

class UserProfile(models.Model):     #create table account_userprofile
    user = models.OneToOneField(User, on_delete=models.CASCADE, unique=True)   #User and UserProfile One to One Mapping
    birth = models.DateField(blank=True, null=True)
    phone = models.CharField(max_length=20, null=True)

$ python manage.py makemigrations account
$ python manage.py migrate account


django.db.models
title = models.CharField(max_length=300)

CharField - string, must specify the length
TextField - string, unlimited length
EmailField, URLField - inherited from CharField, will automatically verify this field
FieldField - used to upload file
DateField, DateTimeField - store time. auto_now_add = True


30. 

/anaconda/lib/python3.6/site-packages/django/contrib/auth/views.py

django-registration
https://django-registration.readthedocs.io/en/3.0/

django social auth (socail account registration)
https://github.com/omab/django-social-auth


post_change_redirect = reverse('password_change_done')
post_change_redirect = reverse('account:password_change_done')

path('password-change/', auth_views.password_change, {"post_change_redirect":"/account/password-change-done"}, name="password_change"),



31.

django 1 and 2, password reset

python 1.0 

当 Django 项目有多个 app 的时候，把所有视图函数都放到项目文件夹的 urls.py 来管理将会是一件比较烦杂的事情，我们可以在各自 app 的文件夹中创建 urls.py 文件来管理该 app 下的 url 和 视图函数的映射关系。

urlpatterns = [
    url(r'^pwd_reset/', include("password_reset.urls", namespace='pwd_reset', app_name='pwd_reset')),
]


django 2.0
https://docs.djangoproject.com/en/2.1/ref/urls/


32.

Django Password Algorithm

MD5
PBKDF2
Bcrypt


33. models

python manage.py makemigrations account
python manage.py migrate

34 django decorator function

@login_required(login_url='/account/login/')
def myself(request):
    ...
    ...
    ...

35. header.html my_information issue

Exception Type: DoesNotExist
Exception Value:    
UserInfo matching query does not exist.


36. JQuery

#id         $("#lastname")      id="lastname" 的元素
.class      $(".intro")         所有 class="intro" 的元素
element     $("p")              所有 <p> 元素














